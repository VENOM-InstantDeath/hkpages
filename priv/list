#!/usr/bin/env python3

#Lista de tareas.
#No curses.

import os
import json
from shlex import split


def list(f):
    while True:
        F = open(f, 'r')
        os.system("clear")
        print("\t\tLista de cosas por hacer\n\n")
        L = [i.strip() for i in F.readlines()]

        for i in range(len(L)):
            print(f"{i + 1}. {L[i]}")

        print("\n\n[1]Añadir tarea")
        print("[2]Borrar tarea")
        print("[3]Reordenar")
        print("[4]Renombrar")
        print("[5]Volver")
        print("[6]Exit")
        while True:
            O = input("\n>> ")
            if O == "1":
                print("\n\t\tAñadir tarea")
                T = input("\n\nTarea: ")
                if T == "0":
                    break
                L.append(T)
                F = open(f, 'w')
                for i in L: F.write(f"{i}\n")
                F.close()
                break
            
            elif O == "2":
                print("\n\t\tBorrar tarea")
                T = input("\n\nTarea: ")
                if T == "0":
                    break
                L.pop(int(T)-1)
                F = open(f, 'w')
                for i in L: F.write(f"{i}\n")
                F.close()
                break

            elif O == "3":
                print("\t\tReordenar")
                T = input("\n\nTarea: ")
                T2 = input("\n\nHacia: ")
                if T == "0":
                    break
                e = L[int(T)-1]
                L[int(T)-1] = L[int(T2)-1]
                L[int(T2)-1] = e
                F = open(f, 'w')
                for i in L: F.write(f"{i}\n")
                F.close()
                break

            elif O == "4":
                print("\t\tRenombrar")
                T = input("\n\nTarea: ")
                T2 = input("Renombrar por: ")
                if T == "0":
                    break
                L[int(T)-1] = T2
                F = open(f, 'w')
                for i in L: F.write(f"{i}\n")
                F.close()
                break

            elif O == "5": return
            elif O == "6": exit()


def main():
    os.system("clear")
    H = os.popen("echo $HOME").read().strip()
    os.chdir(f"{H}/.config")
    if not "list" in os.listdir():
        os.mkdir("list")
    os.chdir("todol")
    if not "rc" in os.listdir():
        D = {
                "N": input("Nombre de lista: "),
                "L": [],
                "T": {}
                }
        D["L"].append(D["N"])
        F = open("rc", "w+")
        F.write(json.dumps(D, indent=4))
        F.close()
        F = open(D["N"], 'w+').close()
    F = open("rc", "r")
    D = json.load(F)
    F.close()

### LISTAS ###
    while True:
        print("\t\tListas\n\n")
        os.system("clear")
        for i in D["L"]: print(i)
        print()
        cmd = split(input("> "))

        if cmd[0] == "add":
            if len(cmd) != 1:
                cmd[1] = cmd[1].split(':') if len(cmd[1].split(':')) == 2 else (None,cmd[1])
                tem = cmd[1][0] if type(cmd[1]) != list else []
                D["L"].append(cmd[1][1])
                F = open("rc", "w")
                F.write(json.dumps(D, indent=4))
                F.close()
                if tem and tem in D['T']:
                    F = open(cmd[1][1], 'w+')
                    F.write(D['T'][cmd[1][0]])
                    F.close()
                else:
                    open(cmd[1][1], 'w+').close()
                continue
            else:
                print("Falta un argumento")
                continue

        if cmd[0] == "tadd":
            tem = input("Nombre de plantilla: ") if len(cmd) != 2 else cmd[1]
            if tem in D['T']: continue
            print("\nEscribe el contenido de la plantilla. Para finalizar añade un '.' en una línea nueva\n")
            line = ''
            while True:
                ll = input()
                if ll == '.':
                    break
                line += ll + '\n'
            D['T'][tem] = line
            F = open("rc", "w")
            F.write(json.dumps(D, indent=4))
            F.close()
            continue

        if cmd[0] == "ted":
            tem = input("Nombre de plantilla: ") if len(cmd) != 2 else cmd[1]
            if tem not in D['T']: continue
            print("\nEscribe el contenido de la plantilla. Para finalizar añade un '.' en una línea nueva\n")
            line = ''
            while True:
                ll = input()
                if ll == '.':
                    break
                line += ll +'\n'
            D['T'][tem] = line
            F = open('rc', 'w')
            F.write(json.dumps(D, indent=4))
            F.close()
            continue

        if cmd[0] == "trm":
            tem = input("Nombre de plantilla: ") if len(cmd) != 2 else cmd[1]
            if tem not in D['T']: continue
            D['T'].pop(tem)
            F = open('rc', 'w')
            F.write(json.dumps(D, indent=4))
            F.close()
            continue

        if cmd[0] == "tls":
            for i in D['T']: print(i)
            input()
            continue
        
        if cmd[0] == "tsh":
            tem = input("Nombre de plantilla: ") if len(cmd) != 2 else cmd[1]
            if tem not in D['T']: continue
            print(D['T'][tem])
            input()
            continue

        if cmd[0] == "exit" or cmd[0] == 'q':
            exit(0)

        if cmd[0] == "del":
            if len(cmd) != 1:
                if cmd[1] in os.listdir():
                    D["L"].pop(D["L"].index(cmd[1]))
                    os.remove(cmd[1])
                    F = open("rc", "w")
                    F.write(json.dumps(D, indent=4))
                    F.close()
                    continue
                else:
                    print("Lista inexistente")
                    continue
            else:
                print("Falta un argumento")
                continue

        if cmd[0] == "sel":
            if len(cmd) != 1:
                if cmd[1] in os.listdir():
                    list(cmd[1])
                else:
                    print("Lista inexistente")
                    continue
            else:
                print("Falta un argumento")
                continue


if __name__ == "__main__":
    main()
